---
AWSTemplateFormatVersion: 2010-09-09

Description: Stack to deploy a highly available, elastic, scalable WordPress environment. This master stack launches multiple nested stacks for different tiers. !! This can only be run in certain AWS Regions - 'us-east-1', 'us-east-2', 'us-west-2', 'eu-west-1'.
Mappings:
  ServicePrincipalPartitionMap:
    aws:
      EC2: ec2.amazonaws.com
      EKS: eks.amazonaws.com
      EKSFargatePods: eks-fargate-pods.amazonaws.com
    aws-cn:
      EC2: ec2.amazonaws.com.cn
      EKS: eks.amazonaws.com
      EKSFargatePods: eks-fargate-pods.amazonaws.com
    aws-us-gov:
      EC2: ec2.amazonaws.com
      EKS: eks.amazonaws.com
      EKSFargatePods: eks-fargate-pods.amazonaws.com
Metadata:

  Authors:
    Description: Ali Mehdi (ali@curriki.org)
  License:
    Description: 'Copyright 2021 Curriki.org, Inc. and its affiliates. All Rights Reserved.'

  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: General AWS
      Parameters:
        - SshAccessCidr
    - Label:
        default: Network
      Parameters:
        - NumberOfAZs
        - AvailabilityZones
        - VpcCidr
        - VpcTenancy
        - PublicSubnet0Cidr
        - PublicSubnet1Cidr
        - PublicSubnet2Cidr
        - PublicSubnet3Cidr
        - PublicSubnet4Cidr
        - PublicSubnet5Cidr
        - PrivateSubnet0Cidr
        - PrivateSubnet1Cidr
        - PrivateSubnet2Cidr
        - PrivateSubnet3Cidr
        - PrivateSubnet4Cidr
        - PrivateSubnet5Cidr
    - Label:
        default: Web Tier
      Parameters:
        - PublicAlbAcmCertificate
        - PHPVersion
        - PHPIniOverride
    ParameterLabels:
      PHPIniOverride:
        default: AWS php.ini Overrides
      PublicAlbAcmCertificate:
        default: ALB Certificate ARN
      SshAccessCidr:
        default: SSH Access From
      AvailabilityZones:
        default: Availability Zones
      NumberOfAZs:
        default: Number of Availability Zones
      VpcCidr:
        default: VpcCidr
      VpcTenancy:
        default: VpcTenancy
      PHPVersion:
        default: PHP Version
      PublicSubnet0Cidr:
        default: Public Subnet 0
      PublicSubnet1Cidr:
        default: Public Subnet 1
      PublicSubnet2Cidr:
        default: Public Subnet 2
      PublicSubnet3Cidr:
        default: Public Subnet 3
      PublicSubnet4Cidr:
        default: Public Subnet 4
      PublicSubnet5Cidr:
        default: Public Subnet 5
      PrivateSubnet0Cidr:
        default: Private Subnet 0
      PrivateSubnet1Cidr:
        default: Private Subnet 1
      PrivateSubnet2Cidr:
        default: Private Subnet 2
      PrivateSubnet3Cidr:
        default: Private Subnet 3
      PrivateSubnet4Cidr:
        default: Private Subnet 4
      PrivateSubnet5Cidr:
        default: Private Subnet 5

Parameters:
  DomainName:
    Type: String
  HostedZoneID:
    Type: String
  VpcCidrBlock:
    Type: String
    Description: CIDR Block for VPC
  SshAccessCidr:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    Description: The CIDR IP range that is permitted to SSH to bastion instance. Note - a value of 0.0.0.0/0 will allow access from ANY IP address.
    Type: String
    Default: 0.0.0.0/0
  AvailabilityZones:
    Description: 'List of Availability Zones to use for the subnets in the VPC. Note:
      The logical order is preserved.'
    Type: List<AWS::EC2::AvailabilityZone::Name>
  NumberOfAZs:
    AllowedValues:
    - 2
    - 3
    - 4
    - 5
    - 6
    Default: 3
    Description: Number of Availability Zones to use in the VPC. This must match your
      selections in the list of Availability Zones parameter.
    Type: Number
  VpcCidr:
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.0.0/16
    Description: CIDR block for the VPC
    Type: String
  VpcTenancy:
    AllowedValues:
    - default
    - dedicated
    Default: default
    Description: The allowed tenancy of instances launched into the VPC
    Type: String
  PublicSubnet0Cidr:
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.200.0/24
    Description: CIDR block for Public subnet 0 located in Availability Zone 0
    Type: String
  PublicSubnet1Cidr:
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.201.0/24
    Description: CIDR block for Public subnet 1 located in Availability Zone 1
    Type: String
  PublicSubnet2Cidr:
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.202.0/24
    Description: CIDR block for Public subnet 2 located in Availability Zone 2
    Type: String
  PublicSubnet3Cidr:
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.203.0/24
    Description: CIDR block for Public subnet 3 located in Availability Zone 3
    Type: String
  PublicSubnet4Cidr:
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.204.0/24
    Description: CIDR block for Public subnet 4 located in Availability Zone 4
    Type: String
  PublicSubnet5Cidr:
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.205.0/24
    Description: CIDR block for Public subnet 5 located in Availability Zone 5
    Type: String
  PrivateSubnet0Cidr:
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.0.0/22
    Description: CIDR block for Web subnet 0 located in Availability Zone 0
    Type: String
  PrivateSubnet1Cidr:
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.4.0/22
    Description: CIDR block for Web subnet 1 located in Availability Zone 1
    Type: String
  PrivateSubnet2Cidr:
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.8.0/22
    Description: CIDR block for Web subnet 2 located in Availability Zone 2
    Type: String
  PrivateSubnet3Cidr:
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.12.0/22
    Description: CIDR block for Web subnet 3 located in Availability Zone 3
    Type: String
  PrivateSubnet4Cidr:
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.16.0/22
    Description: CIDR block for Web subnet 4 located in Availability Zone 4
    Type: String
  PrivateSubnet5Cidr:
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.20.0/22
    Description: CIDR block for Web subnet 5 located in Availability Zone 5
    Type: String
  ClusterName: 
    Type: String
    Description: Name of your managed EKS Cluster
  EksVersion:
    Type: String
    Description: EKS Version
Conditions:
  NumberOfAZs1:
      !Equals [ '1', !Ref NumberOfAZs ]
  NumberOfAZs2:
      !Equals [ '2', !Ref NumberOfAZs ]
  NumberOfAZs3:
      !Equals [ '3', !Ref NumberOfAZs ]
  NumberOfAZs4:
      !Equals [ '4', !Ref NumberOfAZs ]
  NumberOfAZs5:
      !Equals [ '5', !Ref NumberOfAZs ]
  NumberOfAZs6:
      !Equals [ '6', !Ref NumberOfAZs ]
  AZ0: !Or
    - !Condition NumberOfAZs1
    - !Condition NumberOfAZs2
    - !Condition NumberOfAZs3
    - !Condition NumberOfAZs4
    - !Condition NumberOfAZs5
    - !Condition NumberOfAZs6
  AZ1: !Or
    - !Condition NumberOfAZs2
    - !Condition NumberOfAZs3
    - !Condition NumberOfAZs4
    - !Condition NumberOfAZs5
    - !Condition NumberOfAZs6
  AZ2: !Or
    - !Condition NumberOfAZs3
    - !Condition NumberOfAZs4
    - !Condition NumberOfAZs5
    - !Condition NumberOfAZs6
  AZ3: !Or
    - !Condition NumberOfAZs4
    - !Condition NumberOfAZs5
    - !Condition NumberOfAZs6
  AZ4: !Or
    - !Condition NumberOfAZs5
    - !Condition NumberOfAZs6
  AZ5: !Condition NumberOfAZs6

Resources:
  ClusterSharedNodeSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Communication between all nodes in the cluster
      Tags:
      - Key: Name
        Value:
          Fn::Sub: "${AWS::StackName}/ClusterSharedNodeSecurityGroup"
      VpcId:
        Ref: VPC
  ControlPlane:
    Type: AWS::EKS::Cluster
    Properties:
      Name: !Ref ClusterName
      ResourcesVpcConfig:
        SecurityGroupIds:
        - Ref: ControlPlaneSecurityGroup
        - Ref: Ec2SecurityGroup
        SubnetIds: !If [ AZ1, [!Ref PublicSubnet0, !Ref PublicSubnet1, !Ref PrivateSubnet0, !Ref PrivateSubnet1], !If [ AZ2, [!Ref PublicSubnet0, !Ref PublicSubnet1, !Ref PublicSubnet2, !Ref PrivateSubnet0, !Ref PrivateSubnet1, !Ref PrivateSubnet2], [!Ref PublicSubnet0, !Ref PublicSubnet1, !Ref PublicSubnet2, !Ref PublicSubnet3, !Ref PrivateSubnet0, !Ref PrivateSubnet1, !Ref PrivateSubnet2, !Ref PrivateSubnet3] ]]
      RoleArn:
        Fn::GetAtt:
        - ServiceRole
        - Arn
      Version: !Ref EksVersion
  ControlPlaneSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Communication between the control plane and worker nodegroups
      Tags:
      - Key: Name
        Value:
          Fn::Sub: "${AWS::StackName}/ControlPlaneSecurityGroup"
      VpcId:
        Ref: VPC
  IngressDefaultClusterToNodeSG:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow managed and unmanaged nodes to communicate with each other
        (all ports)
      FromPort: 0
      GroupId:
        Ref: ClusterSharedNodeSecurityGroup
      IpProtocol: "-1"
      SourceSecurityGroupId:
        Fn::GetAtt:
        - ControlPlane
        - ClusterSecurityGroupId
      ToPort: 65535
  IngressInterNodeGroupSG:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow nodes to communicate with each other (all ports)
      FromPort: 0
      GroupId:
        Ref: ClusterSharedNodeSecurityGroup
      IpProtocol: "-1"
      SourceSecurityGroupId:
        Ref: ClusterSharedNodeSecurityGroup
      ToPort: 65535
  IngressNodeToDefaultClusterSG:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow unmanaged nodes to communicate with control plane (all ports)
      FromPort: 0
      GroupId:
        Fn::GetAtt:
        - ControlPlane
        - ClusterSecurityGroupId
      IpProtocol: "-1"
      SourceSecurityGroupId:
        Ref: ClusterSharedNodeSecurityGroup
      ToPort: 65535
  PolicyCloudWatchMetrics:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
        - Action:
          - cloudwatch:PutMetricData
          Effect: Allow
          Resource: "*"
        Version: '2012-10-17'
      PolicyName:
        Fn::Sub: "${AWS::StackName}-PolicyCloudWatchMetrics"
      Roles:
      - Ref: ServiceRole
  PolicyELBPermissions:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
        - Action:
          - ec2:DescribeAccountAttributes
          Effect: Allow
          Resource: "*"
        Version: '2012-10-17'
      PolicyName:
        Fn::Sub: "${AWS::StackName}-PolicyELBPermissions"
      Roles:
      - Ref: ServiceRole
  ServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - Fn::FindInMap:
              - ServicePrincipalPartitionMap
              - Ref: AWS::Partition
              - EKS
            - Fn::FindInMap:
              - ServicePrincipalPartitionMap
              - Ref: AWS::Partition
              - EKSFargatePods
        Version: '2012-10-17'
      ManagedPolicyArns:
      - Fn::Sub: arn:${AWS::Partition}:iam::aws:policy/AmazonEKSClusterPolicy
      Tags:
      - Key: Name
        Value:
          Fn::Sub: "${AWS::StackName}/ServiceRole"
  Ec2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH Access via Port 22.
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '8080'
        ToPort: '8080'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '2049'
        ToPort: '2049'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '9200'
        ToPort: '9200'
        CidrIp: 0.0.0.0/0
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-EksDeploymentSG
  Certificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: 
        !Join
        - ''
        - - '*.'
          - !Ref DomainName
      DomainValidationOptions: 
        - DomainName: !Ref DomainName
          HostedZoneId: !Ref HostedZoneID
      ValidationMethod: DNS
  PrivateSubnet0:
    Condition: AZ0
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 0, !Ref AvailabilityZones ]
      CidrBlock: !Ref PrivateSubnet0Cidr
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Join [ '', [ 'PrivateSubnet0 / ', !Ref 'AWS::StackName' ] ]
        - Key: SubnetType
          Value: Private
      VpcId: !Ref VPC
  PrivateSubnet1:
    Condition: AZ1
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 1, !Ref AvailabilityZones ]
      CidrBlock: !Ref PrivateSubnet1Cidr
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Join [ '', [ 'PrivateSubnet1 / ', !Ref 'AWS::StackName' ] ]
        - Key: SubnetType
          Value: Private
      VpcId: !Ref VPC
  PrivateSubnet2:
    Condition: AZ2
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 2, !Ref AvailabilityZones ]
      CidrBlock: !Ref PrivateSubnet2Cidr
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Join [ '', [ 'PrivateSubnet2 / ', !Ref 'AWS::StackName' ] ]
        - Key: SubnetType
          Value: Private
      VpcId: !Ref VPC
  PrivateSubnet3:
    Condition: AZ3
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 3, !Ref AvailabilityZones ]
      CidrBlock: !Ref PrivateSubnet3Cidr
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Join [ '', [ 'PrivateSubnet3 / ', !Ref 'AWS::StackName' ] ]
        - Key: SubnetType
          Value: Private
      VpcId: !Ref VPC
  PrivateSubnet4:
    Condition: AZ4
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 4, !Ref AvailabilityZones ]
      CidrBlock: !Ref PrivateSubnet4Cidr
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Join [ '', [ 'PrivateSubnet4 / ', !Ref 'AWS::StackName' ] ]
        - Key: SubnetType
          Value: Private
      VpcId: !Ref VPC
  PrivateSubnet5:
    Condition: AZ5
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 5, !Ref AvailabilityZones ]
      CidrBlock: !Ref PrivateSubnet5Cidr
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Join [ '', [ 'PrivateSubnet5 / ', !Ref 'AWS::StackName' ] ]
        - Key: SubnetType
          Value: Private
      VpcId: !Ref VPC

  PrivateSubnetRouteTableAssociation0:
    Condition: AZ0
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref NatRouteTable0
      SubnetId: !Ref PrivateSubnet0
  PrivateSubnetRouteTableAssociation1:
    Condition: AZ1
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref NatRouteTable1
      SubnetId: !Ref PrivateSubnet1
  PrivateSubnetRouteTableAssociation2:
    Condition: AZ2
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref NatRouteTable2
      SubnetId: !Ref PrivateSubnet2
  PrivateSubnetRouteTableAssociation3:
    Condition: AZ3
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref NatRouteTable3
      SubnetId: !Ref PrivateSubnet3
  PrivateSubnetRouteTableAssociation4:
    Condition: AZ4
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref NatRouteTable4
      SubnetId: !Ref PrivateSubnet4
  PrivateSubnetRouteTableAssociation5:
    Condition: AZ5
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref NatRouteTable5
      SubnetId: !Ref PrivateSubnet5

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Join [ '', [ 'InternetGateway / ', !Ref 'AWS::StackName' ] ]
  AttachInternetGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  NatEIP0:
    Condition: AZ0
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  NatGateway0:
    Condition: AZ0
    Type: AWS::EC2::NatGateway
    DependsOn: AttachInternetGateway
    Properties:
      AllocationId: !GetAtt NatEIP0.AllocationId
      SubnetId: !Ref PublicSubnet0
  NatRoute0:
    Condition: AZ0
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref NatRouteTable0
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway0
  NatRouteTable0:
    Condition: AZ0
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: !Join [ '', ['NatRouteTable0 / ', !Ref 'AWS::StackName' ] ]
        - Key: Network
          Value: Public
      VpcId: !Ref VPC

  NatEIP1:
    Condition: AZ1
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  NatGateway1:
    Condition: AZ1
    Type: AWS::EC2::NatGateway
    DependsOn: AttachInternetGateway
    Properties:
      AllocationId: !GetAtt NatEIP1.AllocationId
      SubnetId: !Ref PublicSubnet1
  NatRoute1:
    Condition: AZ1
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref NatRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1
  NatRouteTable1:
    Condition: AZ1
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: !Join [ '', [ 'NatRouteTable1 / ', !Ref 'AWS::StackName' ] ]
        - Key: Network
          Value: Public
      VpcId: !Ref VPC

  NatEIP2:
    Condition: AZ2
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  NatGateway2:
    Condition: AZ2
    Type: AWS::EC2::NatGateway
    DependsOn: AttachInternetGateway
    Properties:
      AllocationId: !GetAtt NatEIP2.AllocationId
      SubnetId: !Ref PublicSubnet2
  NatRoute2:
    Condition: AZ2
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref NatRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway2
  NatRouteTable2:
    Condition: AZ2
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: !Join [ '', [ 'NatRouteTable2 / ', !Ref 'AWS::StackName' ] ]
        - Key: Network
          Value: Public
      VpcId: !Ref VPC

  NatEIP3:
    Condition: AZ3
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  NatGateway3:
    Condition: AZ3
    Type: AWS::EC2::NatGateway
    DependsOn: AttachInternetGateway
    Properties:
      AllocationId: !GetAtt NatEIP3.AllocationId
      SubnetId: !Ref PublicSubnet3
  NatRoute3:
    Condition: AZ3
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref NatRouteTable3
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway3
  NatRouteTable3:
    Condition: AZ3
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: !Join [ '', [ 'NatRouteTable3 / ', !Ref 'AWS::StackName' ] ]
        - Key: Network
          Value: Public
      VpcId: !Ref VPC

  NatEIP4:
    Condition: AZ4
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  NatGateway4:
    Condition: AZ4
    Type: AWS::EC2::NatGateway
    DependsOn: AttachInternetGateway
    Properties:
      AllocationId: !GetAtt NatEIP4.AllocationId
      SubnetId: !Ref PublicSubnet4
  NatRoute4:
    Condition: AZ4
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref NatRouteTable4
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway4
  NatRouteTable4:
    Condition: AZ4
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: !Join [ '', [ 'NatRouteTable4 / ', !Ref 'AWS::StackName' ] ]
        - Key: Network
          Value: Public
      VpcId: !Ref VPC

  NatEIP5:
    Condition: AZ5
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  NatGateway5:
    Condition: AZ5
    Type: AWS::EC2::NatGateway
    DependsOn: AttachInternetGateway
    Properties:
      AllocationId: !GetAtt NatEIP5.AllocationId
      SubnetId: !Ref PublicSubnet5
  NatRoute5:
    Condition: AZ5
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref NatRouteTable5
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway5
  NatRouteTable5:
    Condition: AZ5
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: !Join [ '', [ 'NatRouteTable5 / ', !Ref 'AWS::StackName' ] ]
        - Key: Network
          Value: Public
      VpcId: !Ref VPC

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachInternetGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: !Join [ '', [ 'PublicRouteTable / ', !Ref 'AWS::StackName' ] ]
        - Key: Network
          Value: Public
      VpcId: !Ref VPC
  PublicRouteTableAssociation0:
    Condition: AZ0
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet0
      RouteTableId: !Ref PublicRouteTable
  PublicRouteTableAssociation1:
    Condition: AZ1
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable
  PublicRouteTableAssociation2:
    Condition: AZ2
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable
  PublicRouteTableAssociation3:
    Condition: AZ3
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet3
      RouteTableId: !Ref PublicRouteTable
  PublicRouteTableAssociation4:
    Condition: AZ4
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet4
      RouteTableId: !Ref PublicRouteTable
  PublicRouteTableAssociation5:
    Condition: AZ5
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet5
      RouteTableId: !Ref PublicRouteTable            

  PublicSubnet0:
    Condition: AZ0
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 0, !Ref AvailabilityZones ]
      CidrBlock: !Ref PublicSubnet0Cidr
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Join [ '', [ 'PublicSubnet0 / ', !Ref 'AWS::StackName' ] ]
        - Key: SubnetType
          Value: Public
      VpcId: !Ref VPC
  PublicSubnet1:
    Condition: AZ1
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 1, !Ref AvailabilityZones ]
      CidrBlock: !Ref PublicSubnet1Cidr
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Join [ '', [ 'PublicSubnet1 / ', !Ref 'AWS::StackName' ] ]
        - Key: SubnetType
          Value: Public
      VpcId: !Ref VPC
  PublicSubnet2:
    Condition: AZ2
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 2, !Ref AvailabilityZones ]
      CidrBlock: !Ref PublicSubnet2Cidr
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Join [ '', [ 'PublicSubnet2 / ', !Ref 'AWS::StackName' ] ]
        - Key: SubnetType
          Value: Public
      VpcId: !Ref VPC
  PublicSubnet3:
    Condition: AZ3
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 3, !Ref AvailabilityZones ]
      CidrBlock: !Ref PublicSubnet3Cidr
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Join [ '', [ 'PublicSubnet3 / ', !Ref 'AWS::StackName' ] ]
        - Key: SubnetType
          Value: Public
      VpcId: !Ref VPC
  PublicSubnet4:
    Condition: AZ4
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 4, !Ref AvailabilityZones ]
      CidrBlock: !Ref PublicSubnet4Cidr
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Join [ '', [ 'PublicSubnet4 / ', !Ref 'AWS::StackName' ] ]
        - Key: SubnetType
          Value: Public
      VpcId: !Ref VPC
  PublicSubnet5:
    Condition: AZ5
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 5, !Ref AvailabilityZones ]
      CidrBlock: !Ref PublicSubnet5Cidr
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Join [ '', [ 'PublicSubnet5 / ', !Ref 'AWS::StackName' ] ]
        - Key: SubnetType
          Value: Public
      VpcId: !Ref VPC

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Join [ '', [ 'Vpc / ', !Ref 'AWS::StackName' ] ]
  VpcFlowLog:
    Type: AWS::EC2::FlowLog
    Properties:
      DeliverLogsPermissionArn: !GetAtt VpcFlowLogsRole.Arn
      LogGroupName: !Join [ '', [ !Ref 'AWS::StackName', '-FlowLog' ] ]
      ResourceId: !Ref VPC
      ResourceType: VPC
      TrafficType: ALL
  VpcFlowLogsLogGroup:
    Type: AWS::Logs::LogGroup
  VpcFlowLogsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - vpc-flow-logs.amazonaws.com
      Path: '/'
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                  - logs:PutLogEvents
                Effect: Allow
                Resource: '*'

Outputs:
  ARN:
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}::ARN"
    Value:
      Fn::GetAtt:
      - ControlPlane
      - Arn
  Ec2SecurityGroupId:
    Value: !Ref Ec2SecurityGroup
    Description: Id of Security Group for EKS Deployment
  CertificateAuthorityData:
    Value:
      Fn::GetAtt:
      - ControlPlane
      - CertificateAuthorityData
  ClusterSecurityGroupId:
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}::ClusterSecurityGroupId"
    Value:
      Fn::GetAtt:
      - ControlPlane
      - ClusterSecurityGroupId
  ClusterStackName:
    Value:
      Ref: AWS::StackName
  Endpoint:
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}::Endpoint"
    Value:
      Fn::GetAtt:
      - ControlPlane
      - Endpoint
  FeatureNATMode:
    Value: Single
  SecurityGroup:
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}::SecurityGroup"
    Value:
      Ref: ControlPlaneSecurityGroup
  ServiceRoleARN:
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}::ServiceRoleARN"
    Value:
      Fn::GetAtt:
      - ServiceRole
      - Arn
  SharedNodeSecurityGroup:
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}::SharedNodeSecurityGroup"
    Value:
      Ref: ClusterSharedNodeSecurityGroup
  # SubnetsPrivate:
  #   Export:
  #     Name:
  #       Fn::Sub: "${AWS::StackName}::SubnetsPrivate"
  #   Value: !If [CreateFourSubnets, !Join [',', [!Ref PrivateSubnet0, !Ref PrivateSubnet1, !Ref PrivateSubnet2, !Ref PrivateSubnet3]], !If [AZ2, !Join [',', [!Ref PrivateSubnet0, !Ref PrivateSubnet1, !Ref PrivateSubnet2]], !Join [',', [!Ref PrivateSubnet0, !Ref PrivateSubnet1]]] ]
  # SubnetsPublic:
  #   Export:
  #     Name:
  #       Fn::Sub: "${AWS::StackName}::SubnetsPublic"
  #   Value: !If [CreateFourSubnets, !Join [',', [!Ref PublicSubnet0, !Ref PublicSubnet1, !Ref PublicSubnet2, !Ref PublicSubnet3]], !If [AZ2, !Join [',', [!Ref PublicSubnet0, !Ref PublicSubnet1, !Ref PublicSubnet2]], !Join [',', [!Ref PublicSubnet0, !Ref PublicSubnet1]]] ]
  VPC:
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}::VPC"
    Value:
      Ref: VPC
  AcmCertArn:
    Value: !Ref Certificate
  VpcCidr:
    Value: !Ref VpcCidr
  PublicSubnet0:
    Condition: AZ0
    Value: !Ref PublicSubnet0
  PublicSubnet1:
    Condition: AZ1
    Value: !Ref PublicSubnet1
  PublicSubnet2:
    Condition: AZ2
    Value: !Ref PublicSubnet2
  PublicSubnet3:
    Condition: AZ3
    Value: !Ref PublicSubnet3
  PublicSubnet4:
    Condition: AZ4
    Value: !Ref PublicSubnet4  
  PublicSubnet5:
    Condition: AZ5
    Value: !Ref PublicSubnet5
  PrivateSubnet0:
    Condition: AZ0
    Value: !Ref PrivateSubnet0
  PrivateSubnet1:
    Condition: AZ1
    Value: !Ref PrivateSubnet1
  PrivateSubnet2:
    Condition: AZ2
    Value: !Ref PrivateSubnet2
  PrivateSubnet3:
    Condition: AZ3
    Value: !Ref PrivateSubnet3
  PrivateSubnet4:
    Condition: AZ4
    Value: !Ref PrivateSubnet4   
  PrivateSubnet5:
    Condition: AZ5
    Value: !Ref PrivateSubnet5
  SubnetsPrivate:
    Value:
      !If
        [ NumberOfAZs1,
        !Ref PrivateSubnet0,
        !If
          [ NumberOfAZs2,
          !Join [ ',', [ !Ref PrivateSubnet0, !Ref PrivateSubnet1 ] ],
          !If
            [ NumberOfAZs3,
            !Join [ ',', [ !Ref PrivateSubnet0, !Ref PrivateSubnet1, !Ref PrivateSubnet2 ] ],
            !If
              [ NumberOfAZs4,
              !Join [ ',', [ !Ref PrivateSubnet0, !Ref PrivateSubnet1, !Ref PrivateSubnet2, !Ref PrivateSubnet3 ] ],
              !If
                [ NumberOfAZs5,
                !Join [ ',', [ !Ref PrivateSubnet0, !Ref PrivateSubnet1, !Ref PrivateSubnet2, !Ref PrivateSubnet3, !Ref PrivateSubnet4 ] ],
                !Join [ ',', [ !Ref PrivateSubnet0, !Ref PrivateSubnet1, !Ref PrivateSubnet2, !Ref PrivateSubnet3, !Ref PrivateSubnet4, !Ref PrivateSubnet5 ] ]
                ]
              ]
            ]
          ]
        ] 
  SubnetsPublic:
    Value:
      !If
        [ NumberOfAZs1,
        !Ref PublicSubnet0,
        !If
          [ NumberOfAZs2,
          !Join [ ',', [ !Ref PublicSubnet0, !Ref PublicSubnet1 ] ],
          !If
            [ NumberOfAZs3,
            !Join [ ',', [ !Ref PublicSubnet0, !Ref PublicSubnet1, !Ref PublicSubnet2 ] ],
            !If
              [ NumberOfAZs4,
              !Join [ ',', [ !Ref PublicSubnet0, !Ref PublicSubnet1, !Ref PublicSubnet2, !Ref PublicSubnet3 ] ],
              !If
                [ NumberOfAZs5,
                !Join [ ',', [ !Ref PublicSubnet0, !Ref PublicSubnet1, !Ref PublicSubnet2, !Ref PublicSubnet3, !Ref PublicSubnet4 ] ],
                !Join [ ',', [ !Ref PublicSubnet0, !Ref PublicSubnet1, !Ref PublicSubnet2, !Ref PublicSubnet3, !Ref PublicSubnet4, !Ref PublicSubnet5 ] ]
                ]
              ]
            ]
          ]
        ] 

