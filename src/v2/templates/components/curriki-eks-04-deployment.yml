AWSTemplateFormatVersion: '2010-09-09'
Description: 'EKS Deployment via EC2 Instance'
Parameters:
  AvailabilityZones:
    Description: 'List of Availability Zones to use for the subnets in the VPC. Note:
      The logical order is preserved.'
    Type: List<AWS::EC2::AvailabilityZone::Name>
  NumberOfAZs:
    AllowedValues:
    - 2
    - 3
    - 4
    - 5
    - 6
    Description: Number of Availability Zones to use in the VPC. This must match your
      selections in the list of Availability Zones parameter.
    Type: Number
  PublicSubnets:
    Type: String
    Description: ID of Public Subnets
  SSHKeyPair:
    Description: Ec2 Keypair Name
    Type: AWS::EC2::KeyPair::KeyName
  VpcId:
    Type: String
  VpcCidrBlock:
    Type: String
    Description: CIDR Block for VPC
  ClusterName: 
    Type: String
    Description: Name of your managed EKS Cluster
  EC2InstanceProfile:
    Type: String
    Description: Instance Profile Name
  EC2InstanceRoleArn:
    Type: String
    Description: Instance Role Name
  Ec2SecurityGroupId: 
    Type: String
  AcmCertArn:
    Type: String
    Description: Arn
  LaravelFrontEndUrl:
    Type: String
    Description: Laravel Frontend App Url
    Default: https://k8s.currikistudio.org
  ReactAppPexelAPI:
    Type: String
    Description: Pexel API key
  ReactAppGoogleCaptcha:
    Type: String
    Description: React App Google Captcha
  ReactAppGoogleApiClientId:
    Type: String
    Description: React App Google Captcha
  ReactAppHubspot:
    Type: String
    Description: React App Hubspot
  ReactAppH5PKey:
    Type: String
    Description: React App H5P Key
  AmiId:
    Type: AWS::SSM::Parameter::Value<String>
    Description: ParameterStore name of the Parameter containing Ubuntu AMI
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2
  RdsInstanceSecret:
    Type: String
  ElasticSearchUser:
    Type: String
  ElasticSearchPassword:
    Type: String
    NoEcho: true
  RedisPassword:
    Type: String
    NoEcho: true
    Description: Password for Redis cache
  Route53RecordDNS:
    Type: String
    Default: k8s.currikistudio.org
  HostedZoneID:
    Type: String
  AdminUrl:
    Type: String
  DomainName:
    Type: String
Conditions:
  CreateTwoTargets:
    !Equals [ '2', !Ref NumberOfAZs ]
    
  CreateThreeTargets:
    !Equals [ '3', !Ref NumberOfAZs ]

  CreateFourTargets:
    Fn::Or:
    - !Equals [ '4', !Ref NumberOfAZs ]
    - !Equals [ '5', !Ref NumberOfAZs ]
    - !Equals [ '6', !Ref NumberOfAZs ]
  
Resources:
  Ec2Instance:
    DependsOn:
      - EksEfsFileSystem
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          app_deployment:
          - install_cfn
          - install_packages
          - efs_mount
          - config_update
          - configure_postgres
          - deploy_elastic_redis
          - env_updation
          - deploy_application
          - configure_istio
          - route53_record
          
        install_cfn:
          files:
            "/etc/cfn/cfn-hup.conf":
              content:
                Fn::Join:
                - ''
                - - "[main]\n"
                  - stack=
                  - Ref: AWS::StackId
                  - "\n"
                  - region=
                  - Ref: AWS::Region
                  - "\n"
              mode: '000400'
              owner: root
              group: root
            "/etc/cfn/hooks.d/cfn-auto-reloader.conf":
              content:
                !Sub |
                  [cfn-auto-reloader-hook]
                  triggers=post.update
                  path=Resources.Ec2Instance.Metadata.AWS::CloudFormation::Init
                  action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource Ec2Instance --configsets app_deployment --region ${AWS::Region} 
              mode: '000400'
              owner: root
              group: root
          services:
            sysvinit:
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                - "/etc/cfn/cfn-hup.conf"
                - "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
        install_packages:
          packages:
            yum:
              jq: []
              git: []
              amazon-efs-utils: []
            amazon-linux-extras:
              postgresql11: []
          files:
            "/tmp/kubectl_setup":
              content:
                !Sub |
                  #!/bin/bash -xe
                  amazon-linux-extras install postgresql11 -y
                  curl -o kubectl https://amazon-eks.s3.us-west-2.amazonaws.com/1.18.8/2020-09-18/bin/linux/amd64/kubectl
                  chmod +x ./kubectl
                  sudo mv ./kubectl /bin/
              mode: '000700'
              owner: root
              group: root
          commands:
            01_install_kubectl:
              command: "/tmp/kubectl_setup"
            02_configure_kubectl:
              command: 
                !Sub |
                  aws eks update-kubeconfig --name ${ClusterName} --region ${AWS::Region} --role-arn ${EC2InstanceRoleArn}
        efs_mount:
          files:
            "/tmp/mount_efs":
              content:
                !Sub |
                  #!/bin/bash -xe
                  mkdir ~/efs-mount
                  sleep 120
                  sudo mount -t nfs4 -o nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport ${EksEfsFileSystem}.efs.${AWS::Region}.amazonaws.com:/ ~/efs-mount
                  cd /
                  git clone -b develop https://github.com/ActiveLearningStudio/curriki-eks.git
                  unzip /curriki-eks/storage/storage.zip -d ~/efs-mount
              mode: '000700'
              owner: root
              group: root
          commands:
            01_efs_mount:
              command: "/tmp/mount_efs"
              cwd: "~/"
        config_update:
          files:
            "/tmp/config_update":
              content:
                !Sub |
                  #!/bin/bash -xe
                  sed -i 's/substitute-me-efs-id/${EksEfsFileSystem}/g' /curriki-eks/src/v2/yamls/efs-provisioner.yml
                  sed -i 's/substitute-me-efs-region/${AWS::Region}/g' /curriki-eks/src/v2/yamls/efs-provisioner.yml
                  sed -i 's/substitute-me-efs-dns-name/${EksEfsFileSystem}.efs.${AWS::Region}.amazonaws.com/g' /curriki-eks/src/v2/yamls/efs-provisioner.yml
                  cp /curriki-eks/envs/.env.client.example /curriki-eks/envs/.env.local
                  escaped=$(echo ${ReactAppPexelAPI} | sed 's%/%\\/%g')
                  sed "s/reactapppexelapi/$escaped/g" /curriki-eks/envs/.env.local  > /curriki-eks/envs/.env.local.new
                  mv /curriki-eks/envs/.env.local.new /curriki-eks/envs/.env.local
                  escaped=$(echo ${LaravelFrontEndUrl}/api/api | sed 's%/%\\/%g')
                  sed "s/reactappapiurl/$escaped/g" /curriki-eks/envs/.env.local  > /curriki-eks/envs/.env.local.new
                  mv /curriki-eks/envs/.env.local.new /curriki-eks/envs/.env.local
                  escaped=$(echo ${LaravelFrontEndUrl}/api | sed 's%/%\\/%g')
                  sed "s/reactappresourceurl/$escaped/g" /curriki-eks/envs/.env.local  > /curriki-eks/envs/.env.local.new
                  mv /curriki-eks/envs/.env.local.new /curriki-eks/envs/.env.local
                  escaped=$(echo ${ReactAppGoogleCaptcha} | sed 's%/%\\/%g')
                  sed "s/reactappgooglecaptcha/$escaped/g" /curriki-eks/envs/.env.local  > /curriki-eks/envs/.env.local.new
                  mv /curriki-eks/envs/.env.local.new /curriki-eks/envs/.env.local
                  escaped=$(echo ${ReactAppGoogleApiClientId} | sed 's%/%\\/%g')
                  sed "s/reactappgoogleapiclientid/$escaped/g" /curriki-eks/envs/.env.local  > /curriki-eks/envs/.env.local.new
                  mv /curriki-eks/envs/.env.local.new /curriki-eks/envs/.env.local
                  escaped=$(echo ${ReactAppHubspot} | sed 's%/%\\/%g')
                  sed "s/reactapphubspot/$escaped/g" /curriki-eks/envs/.env.local  > /curriki-eks/envs/.env.local.new
                  mv /curriki-eks/envs/.env.local.new /curriki-eks/envs/.env.local
                  escaped=$(echo ${ReactAppH5PKey} | sed 's%/%\\/%g')
                  sed "s/reactapph5pkey/$escaped/g" /curriki-eks/envs/.env.local  > /curriki-eks/envs/.env.local.new
                  mv /curriki-eks/envs/.env.local.new /curriki-eks/envs/.env.local
                  cp /curriki-eks/envs/.env.api.example /curriki-eks/envs/.env
                  cp /curriki-eks/envs/.env.admin.example /curriki-eks/envs/.env.admin
                  escaped=$(echo ${LaravelFrontEndUrl}/api | sed 's%/%\\/%g')
                  sed "s/currikiappurl/$escaped/g" /curriki-eks/envs/.env  > /curriki-eks/envs/.env.new
                  mv /curriki-eks/envs/.env.new /curriki-eks/envs/.env
                  escaped=$(echo ${LaravelFrontEndUrl} | sed 's%/%\\/%g')
                  sed "s/currikifrontendurl/$escaped/g" /curriki-eks/envs/.env  > /curriki-eks/envs/.env.new
                  mv /curriki-eks/envs/.env.new /curriki-eks/envs/.env
                  sed -i 's/update-eks-cluster-name/${ClusterName}/g' /curriki-eks/src/v2/yamls/es.yml
                  sed -i 's/update-eks-es-user/${ElasticSearchUser}/g' /curriki-eks/src/v2/yamls/kibana.yml
                  sed -i 's/update-eks-es-password/${ElasticSearchPassword}/g' /curriki-eks/src/v2/yamls/kibana.yml

                  escaped=$(echo ${LaravelFrontEndUrl} | sed 's%/%\\/%g')
                  sed "s/substitute-frontend-url/$escaped/g" /curriki-eks/envs/.env.admin  > /curriki-eks/envs/.env.admin.new
                  mv /curriki-eks/envs/.env.admin.new /curriki-eks/envs/.env.admin
                  escaped=$(echo ${AdminUrl} | sed 's%/%\\/%g')
                  sed "s/substitute-admin-url/$escaped/g" /curriki-eks/envs/.env.admin  > /curriki-eks/envs/.env.admin.new
                  mv /curriki-eks/envs/.env.admin.new /curriki-eks/envs/.env.admin
                  escaped=$(echo ${AcmCertArn} | sed 's%/%\\/%g')
                  sed "s/substitute-me-acm-cert-substitute-me/$escaped/g" /curriki-eks/src/v2/yamls/istio-install.yaml  > /curriki-eks/src/v2/yamls/istio-install.yaml.new
                  mv /curriki-eks/src/v2/yamls/istio-install.yaml.new /curriki-eks/src/v2/yamls/istio-install.yaml
                  sed "s/substitute-me-acm-cert-substitute-me/$escaped/g" /curriki-eks/src/v2/yamls/admin.yaml  > /curriki-eks/src/v2/yamls/admin.yaml.new
                  mv /curriki-eks/src/v2/yamls/admin.yaml.new /curriki-eks/src/v2/yamls/admin.yaml
              mode: '000700'
              owner: root
              group: root
          commands:
            01_config_update: 
              command: "/tmp/config_update"
        configure_postgres:
          files:
            "/tmp/configure_postgres":
              content:
                !Sub |
                  #!/bin/bash -xe
                  aws --region ${AWS::Region} secretsmanager get-secret-value --secret-id ${RdsInstanceSecret} --query SecretString --output text | jq -r .password > /curriki-eks/envs/password
                  aws --region ${AWS::Region} secretsmanager get-secret-value --secret-id ${RdsInstanceSecret} --query SecretString --output text | jq -r .dbname > /curriki-eks/envs/dbname
                  aws --region ${AWS::Region} secretsmanager get-secret-value --secret-id ${RdsInstanceSecret} --query SecretString --output text | jq -r .port > /curriki-eks/envs/port
                  aws --region ${AWS::Region} secretsmanager get-secret-value --secret-id ${RdsInstanceSecret} --query SecretString --output text | jq -r .host > /curriki-eks/envs/host
                  aws --region ${AWS::Region} secretsmanager get-secret-value --secret-id ${RdsInstanceSecret} --query SecretString --output text | jq -r .username > /curriki-eks/envs/username
                  echo $(tr -dc A-Za-z0-9 </dev/urandom | head -c 32 ; echo '' ) > /curriki-eks/envs/appkey
                  sed -i "s/currikiappkey/$(cat /curriki-eks/envs/appkey)/g" /curriki-eks/envs/.env
                  sed -i "s/currikidbhost/$(cat /curriki-eks/envs/host | sed 's%&%\\&%g')/g" /curriki-eks/envs/.env
                  sed -i "s/currikidbport/$(cat /curriki-eks/envs/port | sed 's%&%\\&%g')/g" /curriki-eks/envs/.env
                  sed -i "s/currikidbdatabase/$(cat /curriki-eks/envs/dbname | sed 's%&%\\&%g')/g" /curriki-eks/envs/.env
                  sed -i "s/currikidbusername/$(cat /curriki-eks/envs/username | sed 's%&%\\&%g')/g" /curriki-eks/envs/.env
                  sed -i "s/currikidbpass/$(cat /curriki-eks/envs/password | sed 's%&%\\&%g')/g" /curriki-eks/envs/.env
                  export PGPASSWORD="$(cat /curriki-eks/envs/password)"
                  psql -h $(cat /curriki-eks/envs/host) -U $(cat /curriki-eks/envs/username) -d $(cat /curriki-eks/envs/dbname) -w < /curriki-eks/db/studio-initial-db.sql
                  sudo kubectl create secret generic curriki-postgres-credentials --from-file=host=/curriki-eks/envs/host  --from-file=username=/curriki-eks/envs/username  --from-file=dbname=/curriki-eks/envs/dbname  --from-file=password=/curriki-eks/envs/password
              mode: '000700'
              owner: root
              group: root
          commands:
            01_configure_postgres:
              command: "/tmp/configure_postgres"
        deploy_elastic_redis:
          files:
            "/tmp/deploy_elastic_redis":
              content:
                !Sub |
                  #!/bin/bash -xe
                  sudo kubectl apply -f /curriki-eks/src/v2/yamls/rbac.yml
                  sudo kubectl apply -f /curriki-eks/src/v2/yamls/efs-provisioner.yml
                  sudo kubectl apply -f /curriki-eks/src/v2/yamls/es.yml
                  sudo kubectl apply -f /curriki-eks/src/v2/yamls/es-svc.yml
                  sudo kubectl create secret generic redis --from-literal="REDIS_PASS=${RedisPassword}"
                  sudo kubectl apply -f /curriki-eks/src/v2/yamls/redis.yaml
                  sleep 60
                  sudo kubectl exec -i $(sudo kubectl get pods | grep elasticsearch-client | sed -n 1p | awk '{print $1}') -- bin/elasticsearch-users useradd ${ElasticSearchUser} -p ${ElasticSearchPassword} -r superuser
                  sudo kubectl apply -f /curriki-eks/src/v2/yamls/kibana.yml
              mode: '000700'
              owner: root
              group: root
          commands:
            01_deploy_elastic_redis:
              command: "/tmp/deploy_elastic_redis"
        deploy_application:
          files:
            "/tmp/deploy_application":
              content:
                # TODO - Substitute redis variables in secret/curriki-api-echo-server
                !Sub |
                  #!/bin/bash -xe
                  sudo kubectl create secret generic currikidev-api-secret --from-file=/curriki-eks/envs/.env
                  sudo kubectl create secret generic currikidev-client-secret --from-file=/curriki-eks/envs/.env.local
                  sudo kubectl create secret generic curriki-admin-env --from-file=/curriki-eks/envs/.env.admin
                  sudo kubectl create secret generic curriki-api-echo-server --from-file=/curriki-eks/envs/laravel-echo-server.json
                  sudo kubectl apply -k "github.com/kubernetes-sigs/aws-efs-csi-driver/deploy/kubernetes/overlays/stable/?ref=master"
                  sudo kubectl apply -f /curriki-eks/src/v2/yamls/admin.yaml
                  sudo kubectl apply -f /curriki-eks/src/v2/yamls/api.yaml
                  sudo kubectl apply -f /curriki-eks/src/v2/yamls/client.yaml
                  sudo kubectl apply -f /curriki-eks/src/v2/yamls/api-es-index-load-job.yaml
                  
              mode: '000700'
              owner: root
              group: root
          commands:
            01_deploy_application:
              command: "/tmp/deploy_application"
        configure_istio:
          files:
            "/tmp/configure_istio":
              content:
                !Sub |
                  #!/bin/bash -xe
                  cd /
                  curl -L https://istio.io/downloadIstio | ISTIO_VERSION=1.7.3 TARGET_ARCH=x86_64 sh -
                  sudo /istio-1.7.3/bin/istioctl install --set profile=demo -f /curriki-eks/src/v2/yamls/istio-install.yaml
                  sudo kubectl apply -f /curriki-eks/src/v2/yamls/istio.yaml
              mode: '000700'
              owner: root
              group: root
          commands:
            01_configure_istio:
              command: "/tmp/configure_istio"
        route53_record:
          files:
            "/route53/route53_record_batch.json":
              content:
                !Sub |
                  {
                    "Comment":"Updates CNAME to a specified value",
                    "Changes":[{
                      "Action":"UPSERT",
                      "ResourceRecordSet":{
                        "Name":"${Route53RecordDNS}",
                        "Type":"A",
                        "AliasTarget":{
                          "HostedZoneId": "update-elb-hosted-zone",
                          "DNSName":"update-target-hostname",
                          "EvaluateTargetHealth": false
                        }
                      }
                    }]
                  }
              mode: '000600'
              owner: root
              group: root
          commands:
            01_update_target_dns: 
              command: CLIENT_DNS=$(sudo kubectl get svc -n istio-system | grep istio-ingressgateway | sed -n 1p | awk '{print $4}') && sed -i "s/update-target-hostname/$CLIENT_DNS/g" /route53/route53_record_batch.json
            02_update_elb_hosted_zone:
              command: 
                !Sub |
                  ELB_NAME=$(echo $CLIENT_DNS | cut -d'-' -f1) && ELB_HOSTED_ZONE_ID=$(aws elb describe-load-balancers --load-balancer-name $ELB_NAME --region ${AWS::Region} --query 'LoadBalancerDescriptions[0].CanonicalHostedZoneNameID' --output text) && sed -i "s/update-elb-hosted-zone/$ELB_HOSTED_ZONE_ID/g" /route53/route53_record_batch.json
            03_create_record_set:
              command: 
                !Sub |
                  cd /route53/ && aws route53 change-resource-record-sets --hosted-zone-id ${HostedZoneID} --change-batch file://route53_record_batch.json
        env_updation:
          files:
            "/tmp/env_updation":
              content:
                !Sub |
                  REDIS_HOST=$(sudo kubectl get svc | grep redis | sed -n 1p | awk '{print $4}')
                  sed -i "s/REDIS_HOST=/REDIS_HOST=$REDIS_HOST/g" /curriki-eks/envs/.env
                  sed -i "s/REDIS_PASSWORD=/REDIS_PASSWORD=${RedisPassword}/g" /curriki-eks/envs/.env
                  sed -i "s/REDIS_PORT=/REDIS_PORT=6379/g" /curriki-eks/envs/.env
                  while [ -z $(sudo kubectl get svc | grep elasticsearch-logging-external | sed -n 1p | awk '{print $4}') ]; do echo waiting for elastic search; done
                  ELASTIC_HOST=$(sudo kubectl get svc | grep elasticsearch-logging-external | sed -n 1p | awk '{print $4}')
                  sed -i "s/ELASTIC_HOST=/ELASTIC_HOST=$ELASTIC_HOST/g" /curriki-eks/envs/.env
                  sed -i "s/ELASTIC_USER=/ELASTIC_USER=${ElasticSearchUser}/g" /curriki-eks/envs/.env
                  sed -i "s/ELASTIC_PASS=/ELASTIC_PASS=${ElasticSearchPassword}/g" /curriki-eks/envs/.env
                  sed -i "s+ELASTIC_MIGRATIONS_DIRECTORY=+ELASTIC_MIGRATIONS_DIRECTORY=elastic/migrations+g" /curriki-eks/envs/.env 
                  sed -i "s/SCOUT_DRIVER=null/SCOUT_DRIVER=elastic/g" /curriki-eks/envs/.env
                  sed -i "s/QUEUE_CONNECTION=sync/QUEUE_CONNECTION=database/g" /curriki-eks/envs/.env
                  sed -i "s/substitute-redis-port/6379/g" /curriki-eks/envs/laravel-echo-server.json
                  sed -i "s/substitute-redis-host/$REDIS_HOST/g" /curriki-eks/envs/laravel-echo-server.json
                  sed -i "s/substitute-redis-password/${RedisPassword}/g" /curriki-eks/envs/laravel-echo-server.json
              mode: '000700'
              owner: root
              group: root
          commands: 
            01_update_env_vars:
              command: "/tmp/env_updation"

    CreationPolicy:
      ResourceSignal:
        Timeout: PT30M
    Properties: 
      ImageId: !Ref AmiId
      InstanceType: t2.micro
      KeyName: !Ref SSHKeyPair
      IamInstanceProfile: !Ref EC2InstanceProfile
      SecurityGroupIds: 
        - !Ref Ec2SecurityGroupId
      SubnetId: !Select [0, !Split [',', !Ref PublicSubnets]]
      UserData: 
        Fn::Base64: 
          !Sub |
            #!/bin/bash -xe
            yum update -y aws-cfn-bootstrap 
            /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource Ec2Instance --configsets app_deployment --region ${AWS::Region}
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource Ec2Instance --region ${AWS::Region}

  EksEfsFileSystem:
    Type: AWS::EFS::FileSystem
    Properties: 
      BackupPolicy: 
        Status: ENABLED
      Encrypted: true
      FileSystemTags: 
        - Key: Name
          Value: EksEfsFileSystem
      LifecyclePolicies: 
        - TransitionToIA: AFTER_30_DAYS
  EksEfsTargetA:
    Type: AWS::EFS::MountTarget
    Properties: 
      FileSystemId: !Ref EksEfsFileSystem
      SecurityGroups: 
        - !Ref Ec2SecurityGroupId
      SubnetId: !Select [0, !Split [',', !Ref PublicSubnets]]
  EksEfsTargetB:
    Type: AWS::EFS::MountTarget
    Properties: 
      FileSystemId: !Ref EksEfsFileSystem
      SecurityGroups: 
        - !Ref Ec2SecurityGroupId
      SubnetId: !Select [1, !Split [',', !Ref PublicSubnets]]
  EksEfsTargetC3:
    Condition: CreateThreeTargets
    Type: AWS::EFS::MountTarget
    Properties: 
      FileSystemId: !Ref EksEfsFileSystem
      SecurityGroups: 
        - !Ref Ec2SecurityGroupId
      SubnetId: !Select [2, !Split [',', !Ref PublicSubnets]]
  EksEfsTargetC4:
    Condition: CreateFourTargets
    Type: AWS::EFS::MountTarget
    Properties: 
      FileSystemId: !Ref EksEfsFileSystem
      SecurityGroups: 
        - !Ref Ec2SecurityGroupId
      SubnetId: !Select [2, !Split [',', !Ref PublicSubnets]]
  EksEfsTargetD:
    Condition: CreateFourTargets
    Type: AWS::EFS::MountTarget
    Properties: 
      FileSystemId: !Ref EksEfsFileSystem
      SecurityGroups: 
        - !Ref Ec2SecurityGroupId
      SubnetId: !Select [3, !Split [',', !Ref PublicSubnets]]
