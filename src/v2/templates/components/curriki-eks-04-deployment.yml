AWSTemplateFormatVersion: '2010-09-09'
Description: 'EKS Deployment via EC2 Instance'
Parameters:
  AvailabilityZones:
    Description: 'List of Availability Zones to use for the subnets in the VPC. Note:
      The logical order is preserved.'
    Type: List<AWS::EC2::AvailabilityZone::Name>
  NumberOfAZs:
    AllowedValues:
    - 2
    - 3
    - 4
    - 5
    - 6
    Description: Number of Availability Zones to use in the VPC. This must match your
      selections in the list of Availability Zones parameter.
    Type: Number
  PublicSubnets:
    Type: String
    Description: ID of Public Subnets
  SSHKeyPair:
    Description: Ec2 Keypair Name
    Type: AWS::EC2::KeyPair::KeyName
  VpcId:
    Type: String
  VpcCidrBlock:
    Type: String
    Description: CIDR Block for VPC
  ClusterName: 
    Type: String
    Description: Name of your managed EKS Cluster
  EC2InstanceProfile:
    Type: String
    Description: Instance Profile Name
  EC2InstanceRoleArn:
    Type: String
    Description: Instance Role Name
  Ec2SecurityGroupId: 
    Type: String
  AcmCertArn:
    Type: String
    Description: Arn
  LaravelFrontEndUrl:
    Type: String
    Description: Laravel Frontend App Url
    Default: https://k8s.currikistudio.org
  ReactAppPexelAPI:
    Type: String
    Description: Pexel API key
  ReactAppResourceUrl:
    Type: String
    Description: React App Api Url
    Default: https://k8s.currikistudio.org/api
  ReactAppGoogleCaptcha:
    Type: String
    Description: React App Google Captcha
  ReactAppGoogleApiClientId:
    Type: String
    Description: React App Google Captcha
  ReactAppHubspot:
    Type: String
    Description: React App Hubspot
  ReactAppH5PKey:
    Type: String
    Description: React App H5P Key
  AmiId:
    Type: AWS::SSM::Parameter::Value<String>
    Description: ParameterStore name of the Parameter containing Ubuntu AMI
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2
Conditions:
  CreateTwoTargets:
    !Equals [ '2', !Ref NumberOfAZs ]
    
  CreateThreeTargets:
    !Equals [ '3', !Ref NumberOfAZs ]

  CreateFourTargets:
    Fn::Or:
    - !Equals [ '4', !Ref NumberOfAZs ]
    - !Equals [ '5', !Ref NumberOfAZs ]
    - !Equals [ '6', !Ref NumberOfAZs ]
  
Resources:
  # EC2InstanceProfile: 
  #   Type: "AWS::IAM::InstanceProfile"
  #   Properties: 
  #     Path: "/"
  #     Roles: 
  #       - !Ref InstanceProfileRole

  Ec2Instance:
    DependsOn:
      - EksEfsFileSystem
    Type: AWS::EC2::Instance
    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          Install:
          - Install
        Install:
          files:
            /tmp/test.txt:
              content: Done!
              mode: '000755'
              owner: root
              group: root
    CreationPolicy:
      ResourceSignal:
        Timeout: PT30M
    Properties: 
      ImageId: !Ref AmiId
      InstanceType: t2.micro
      KeyName: !Ref SSHKeyPair
      IamInstanceProfile: !Ref EC2InstanceProfile
      SecurityGroupIds: 
        - !Ref Ec2SecurityGroupId
      SubnetId: !Select [0, !Split [',', !Ref PublicSubnets]]
      UserData: 
        Fn::Base64: 
          !Sub |
            #!/bin/bash
            yum update -y
            yum install -y amazon-efs-utils
            curl -o kubectl https://amazon-eks.s3.us-west-2.amazonaws.com/1.18.8/2020-09-18/bin/linux/amd64/kubectl
            chmod +x ./kubectl
            sudo mv ./kubectl /bin/
            yum install jq -y
            yum install git -y
            amazon-linux-extras install postgresql11 -y
            aws sts assume-role --role-arn ${EC2InstanceRoleArn} --role-session-name first
            aws eks update-kubeconfig --name ${ClusterName} --region ${AWS::Region} --role-arn ${EC2InstanceRoleArn}
            mkdir ~/efs-mount
            sudo mount -t nfs4 -o nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport ${EksEfsFileSystem}.efs.${AWS::Region}.amazonaws.com:/ ~/efs-mount
            git clone -b develop https://github.com/ActiveLearningStudio/curriki-eks.git
            unzip /curriki-eks/storage/storage.zip -d ~/efs-mount
            sed -i 's/substitute-me-efs-id/${EksEfsFileSystem}/g' /curriki-eks/src/v2/yamls/efs-provisioner.yml
            sed -i 's/substitute-me-efs-region/${AWS::Region}/g' /curriki-eks/src/v2/yamls/efs-provisioner.yml
            sed -i 's/substitute-me-efs-dns-name/${EksEfsFileSystem}.efs.${AWS::Region}.amazonaws.com/g' /curriki-eks/src/v2/yamls/efs-provisioner.yml
            cp /curriki-eks/envs/.env.client.example /curriki-eks/envs/.env.local
            escaped=$(echo ${ReactAppPexelAPI} | sed 's%/%\\/%g')
            sed "s/reactapppexelapi/$escaped/g" /curriki-eks/envs/.env.local  > /curriki-eks/envs/.env.local.new
            mv /curriki-eks/envs/.env.local.new /curriki-eks/envs/.env.local
            escaped=$(echo ${LaravelFrontEndUrl}/api/api | sed 's%/%\\/%g')
            sed "s/reactappapiurl/$escaped/g" /curriki-eks/envs/.env.local  > /curriki-eks/envs/.env.local.new
            mv /curriki-eks/envs/.env.local.new /curriki-eks/envs/.env.local
            escaped=$(echo ${LaravelFrontEndUrl}/api | sed 's%/%\\/%g')
            sed "s/reactappresourceurl/$escaped/g" /curriki-eks/envs/.env.local  > /curriki-eks/envs/.env.local.new
            mv /curriki-eks/envs/.env.local.new /curriki-eks/envs/.env.local
            escaped=$(echo ${ReactAppGoogleCaptcha} | sed 's%/%\\/%g')
            sed "s/reactappgooglecaptcha/$escaped/g" /curriki-eks/envs/.env.local  > /curriki-eks/envs/.env.local.new
            mv /curriki-eks/envs/.env.local.new /curriki-eks/envs/.env.local
            escaped=$(echo ${ReactAppGoogleApiClientId} | sed 's%/%\\/%g')
            sed "s/reactappgoogleapiclientid/$escaped/g" /curriki-eks/envs/.env.local  > /curriki-eks/envs/.env.local.new
            mv /curriki-eks/envs/.env.local.new /curriki-eks/envs/.env.local
            escaped=$(echo ${ReactAppHubspot} | sed 's%/%\\/%g')
            sed "s/reactapphubspot/$escaped/g" /curriki-eks/envs/.env.local  > /curriki-eks/envs/.env.local.new
            mv /curriki-eks/envs/.env.local.new /curriki-eks/envs/.env.local
            escaped=$(echo ${ReactAppH5PKey} | sed 's%/%\\/%g')
            sed "s/reactapph5pkey/$escaped/g" /curriki-eks/envs/.env.local  > /curriki-eks/envs/.env.local.new
            mv /curriki-eks/envs/.env.local.new /curriki-eks/envs/.env.local
            cp /curriki-eks/envs/.env.api.example /curriki-eks/envs/.env
            escaped=$(echo ${LaravelFrontEndUrl}/api | sed 's%/%\\/%g')
            sed "s/currikiappurl/$escaped/g" /curriki-eks/envs/.env  > /curriki-eks/envs/.env.new
            mv /curriki-eks/envs/.env.new /curriki-eks/envs/.env
            escaped=$(echo ${LaravelFrontEndUrl} | sed 's%/%\\/%g')
            sed "s/currikifrontendurl/$escaped/g" /curriki-eks/envs/.env  > /curriki-eks/envs/.env.new
            mv /curriki-eks/envs/.env.new /curriki-eks/envs/.env
            aws --region ${AWS::Region} secretsmanager get-secret-value --secret-id CurrikiStudioRDSCredentials --query SecretString --output text | jq -r .password > /curriki-eks/envs/password
            aws --region ${AWS::Region} secretsmanager get-secret-value --secret-id CurrikiStudioRDSCredentials --query SecretString --output text | jq -r .dbname > /curriki-eks/envs/dbname
            aws --region ${AWS::Region} secretsmanager get-secret-value --secret-id CurrikiStudioRDSCredentials --query SecretString --output text | jq -r .port > /curriki-eks/envs/port
            aws --region ${AWS::Region} secretsmanager get-secret-value --secret-id CurrikiStudioRDSCredentials --query SecretString --output text | jq -r .host > /curriki-eks/envs/host
            aws --region ${AWS::Region} secretsmanager get-secret-value --secret-id CurrikiStudioRDSCredentials --query SecretString --output text | jq -r .username > /curriki-eks/envs/username
            sed -i "s/currikidbhost/$(cat /curriki-eks/envs/host | sed 's%&%\\&%g')/g" /curriki-eks/envs/.env
            sed -i "s/currikidbport/$(cat /curriki-eks/envs/port | sed 's%&%\\&%g')/g" /curriki-eks/envs/.env
            sed -i "s/currikidbdatabase/$(cat /curriki-eks/envs/dbname | sed 's%&%\\&%g')/g" /curriki-eks/envs/.env
            sed -i "s/currikidbusername/$(cat /curriki-eks/envs/username | sed 's%&%\\&%g')/g" /curriki-eks/envs/.env
            sed -i "s/currikidbpass/$(cat /curriki-eks/envs/password | sed 's%&%\\&%g')/g" /curriki-eks/envs/.env
            export PGPASSWORD="$(cat /curriki-eks/envs/password)"
            psql -h $(cat /curriki-eks/envs/host) -U $(cat /curriki-eks/envs/username) -d $(cat /curriki-eks/envs/dbname) < /curriki-eks/db/studio-initial-db.sql
            sudo kubectl create secret generic currikidev-api-secret --from-file=/curriki-eks/envs/.env
            sudo kubectl create secret generic currikidev-client-secret --from-file=/curriki-eks/envs/.env.local
            sudo kubectl apply -k "github.com/kubernetes-sigs/aws-efs-csi-driver/deploy/kubernetes/overlays/stable/?ref=master"
            sudo kubectl apply -f /curriki-eks/src/v2/yamls/rbac.yml
            sudo kubectl apply -f /curriki-eks/src/v2/yamls/efs-provisioner.yml
            sudo kubectl apply -f /curriki-eks/src/v2/yamls/api.yaml
            sudo kubectl apply -f /curriki-eks/src/v2/yamls/client.yaml
            sudo kubectl apply -f /curriki-eks/src/v2/yamls/es.yml
            sudo kubectl apply -f /curriki-eks/src/v2/yamls/es-svc.yml
            sudo kubectl apply -f /curriki-eks/src/v2/yamls/kibana.yml
            curl -L https://istio.io/downloadIstio | ISTIO_VERSION=1.7.3 TARGET_ARCH=x86_64 sh -
            escaped=$(echo ${AcmCertArn} | sed 's%/%\\/%g')
            sed "s/substitute-me-acm-cert-substitute-me/$escaped/g" /curriki-eks/src/v2/yamls/istio-install.yaml  > /curriki-eks/src/v2/yamls/istio-install.yaml.new
            mv /curriki-eks/src/v2/yamls/istio-install.yaml.new /curriki-eks/src/v2/yamls/istio-install.yaml
            sudo /istio-1.7.3/bin/istioctl install --set profile=demo -f /curriki-eks/src/v2/yamls/istio-install.yaml
            sudo kubectl label namespace default istio-injection=enabled
            sudo kubectl apply -f /curriki-eks/src/v2/yamls/istio.yaml
            /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource Ec2Instance --configsets Install --region ${AWS::Region}
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource Ec2Instance --region ${AWS::Region}

  EksEfsFileSystem:
    Type: AWS::EFS::FileSystem
    Properties: 
      BackupPolicy: 
        Status: ENABLED
      Encrypted: true
      FileSystemTags: 
        - Key: Name
          Value: EksEfsFileSystem
      LifecyclePolicies: 
        - TransitionToIA: AFTER_30_DAYS
  EksEfsTargetA:
    Type: AWS::EFS::MountTarget
    Properties: 
      FileSystemId: !Ref EksEfsFileSystem
      SecurityGroups: 
        - !Ref Ec2SecurityGroupId
      SubnetId: !Select [0, !Split [',', !Ref PublicSubnets]]
  EksEfsTargetB:
    Type: AWS::EFS::MountTarget
    Properties: 
      FileSystemId: !Ref EksEfsFileSystem
      SecurityGroups: 
        - !Ref Ec2SecurityGroupId
      SubnetId: !Select [1, !Split [',', !Ref PublicSubnets]]
  EksEfsTargetC3:
    Condition: CreateThreeTargets
    Type: AWS::EFS::MountTarget
    Properties: 
      FileSystemId: !Ref EksEfsFileSystem
      SecurityGroups: 
        - !Ref Ec2SecurityGroupId
      SubnetId: !Select [2, !Split [',', !Ref PublicSubnets]]
  EksEfsTargetC4:
    Condition: CreateFourTargets
    Type: AWS::EFS::MountTarget
    Properties: 
      FileSystemId: !Ref EksEfsFileSystem
      SecurityGroups: 
        - !Ref Ec2SecurityGroupId
      SubnetId: !Select [2, !Split [',', !Ref PublicSubnets]]
  EksEfsTargetD:
    Condition: CreateFourTargets
    Type: AWS::EFS::MountTarget
    Properties: 
      FileSystemId: !Ref EksEfsFileSystem
      SecurityGroups: 
        - !Ref Ec2SecurityGroupId
      SubnetId: !Select [3, !Split [',', !Ref PublicSubnets]]
