AWSTemplateFormatVersion: '2010-09-09'
Description: 'EKS Deployment via EC2 Instance'
Parameters:
  AvailabilityZones:
    Description: 'List of Availability Zones to use for the subnets in the VPC. Note:
      The logical order is preserved.'
    Type: List<AWS::EC2::AvailabilityZone::Name>
  NumberOfAZs:
    AllowedValues:
    - 2
    - 3
    - 4
    - 5
    - 6
    Description: Number of Availability Zones to use in the VPC. This must match your
      selections in the list of Availability Zones parameter.
    Type: Number
  PublicSubnets:
    Type: String
    Description: ID of Public Subnets
  SSHKeyPair:
    Description: Ec2 Keypair Name
    Type: AWS::EC2::KeyPair::KeyName
  VpcId:
    Type: String
  VpcCidrBlock:
    Type: String
    Description: CIDR Block for VPC
  ClusterName: 
    Type: String
    Description: Name of your managed EKS Cluster
  AmiId:
    Type: AWS::SSM::Parameter::Value<String>
    Description: ParameterStore name of the Parameter containing Ubuntu AMI
    Default: /aws/service/canonical/ubuntu/server/20.04/stable/current/amd64/hvm/ebs-gp2/ami-id
  AwsAccessKeyId:
    Type: String
    Description: AWS Access Key ID
    NoEcho: "true"
  AwsSecretAccessKey:
    Type: String
    Description: AWS Secret Access Key
    NoEcho: "true"
  Ec2SecurityGroupId: 
    Type: String
  HostedZoneId:
    Type: String
    Description: Route53 hosted zone id
  DomainName:
    Type: String
    Description: Domain name without http/https (www.example.com or *.example.com)
  S3BucketURL:
    Type: String
    Description: S3 Bucket URL
  AcmCertArn:
    Type: String
    Description: Arn
Conditions:
  CreateTwoTargets:
    !Equals [ '2', !Ref NumberOfAZs ]
    
  CreateThreeTargets:
    !Equals [ '3', !Ref NumberOfAZs ]

  CreateFourTargets:
    Fn::Or:
    - !Equals [ '4', !Ref NumberOfAZs ]
    - !Equals [ '5', !Ref NumberOfAZs ]
    - !Equals [ '6', !Ref NumberOfAZs ]
  
Resources:
  Ec2Instance:
    DependsOn:
      - EksEfsFileSystem
      # - AcmCertArn
    Type: AWS::EC2::Instance
    Properties: 
      ImageId: !Ref AmiId
      InstanceType: t2.micro
      KeyName: !Ref SSHKeyPair
      SecurityGroupIds: 
        - !Ref Ec2SecurityGroupId
      SubnetId: !Select [0, !Split [',', !Ref PublicSubnets]]
      UserData: 
        Fn::Base64: 
          !Sub |
            #!/bin/bash
            apt upgrade -y && apt update -y
            apt install awscli nfs-common unzip -y
            snap install kubectl --classic
            aws configure set aws_access_key_id ${AwsAccessKeyId} --profile default 
            aws configure set aws_secret_access_key ${AwsSecretAccessKey} --profile default
            aws eks update-kubeconfig --name ${ClusterName} --region ${AWS::Region}
            mkdir ~/efs-mount
            wget https://currikieks.s3-us-west-1.amazonaws.com/quickstart-amazon-eks.zip
            unzip quickstart-amazon-eks.zip -d ~/efs-mount
            sudo mount -t nfs4 -o nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport ${EksEfsFileSystem}.efs.${AWS::Region}.amazonaws.com:/ ~/efs-mount
            git clone -b develop https://github.com/ActiveLearningStudio/curriki-eks.git
            sed -i 's/substitute-me-efs-id/${EksEfsFileSystem}/g' /curriki-eks/yamls/efs-provisioner.yml
            sed -i 's/substitute-me-efs-region/${AWS::Region}/g' /curriki-eks/yamls/efs-provisioner.yml
            sed -i 's/substitute-me-efs-dns-name/${EksEfsFileSystem}.efs.${AWS::Region}.amazonaws.com/g' /curriki-eks/yamls/efs-provisioner.yml
            cp /curriki-eks/envs/.env.client.example /curriki-eks/envs/.env.local
            cp /curriki-eks/envs/.env.api.example /curriki-eks/envs/.env
            sudo kubectl create secret generic currikidev-api-secret --from-file=/curriki-eks/envs/.env
            sudo kubectl create secret generic currikidev-client-secret --from-file=/curriki-eks/envs/.env.local
            sudo kubectl apply -k "github.com/kubernetes-sigs/aws-efs-csi-driver/deploy/kubernetes/overlays/stable/?ref=master"
            sudo kubectl apply -f /curriki-eks/yamls/rbac.yml
            sudo kubectl apply -f /curriki-eks/yamls/efs-provisioner.yml
            sudo kubectl apply -f /curriki-eks/yamls/api.yaml
            sudo kubectl apply -f /curriki-eks/yamls/client.yaml
            curl -L https://istio.io/downloadIstio | ISTIO_VERSION=1.7.3 TARGET_ARCH=x86_64 sh -
            escaped=$(echo ${AcmCertArn} | sed 's%/%\\/%g')
            sed "s/substitute-me-acm-cert-substitute-me/$escaped/g" /curriki-eks/yamls/istio-install.yaml  > /curriki-eks/yamls/istio-install.yaml.new
            mv /curriki-eks/yamls/istio-install.yaml.new /curriki-eks/yamls/istio-install.yaml
            sudo /istio-1.7.3/bin/istioctl install --set profile=default -f /curriki-eks/yamls/istio-install.yaml
            sudo kubectl label namespace default istio-injection=enabled
            sudo kubectl apply -f /curriki-eks/yamls/istio.yaml

  EksEfsFileSystem:
    Type: AWS::EFS::FileSystem
    Properties: 
      BackupPolicy: 
        Status: ENABLED
      Encrypted: true
      FileSystemTags: 
        - Key: Name
          Value: EksEfsFileSystem
      LifecyclePolicies: 
        - TransitionToIA: AFTER_30_DAYS
  EksEfsTargetA:
    Type: AWS::EFS::MountTarget
    Properties: 
      FileSystemId: !Ref EksEfsFileSystem
      SecurityGroups: 
        - !Ref Ec2SecurityGroupId
      SubnetId: !Select [0, !Split [',', !Ref PublicSubnets]]
  EksEfsTargetB:
    Type: AWS::EFS::MountTarget
    Properties: 
      FileSystemId: !Ref EksEfsFileSystem
      SecurityGroups: 
        - !Ref Ec2SecurityGroupId
      SubnetId: !Select [1, !Split [',', !Ref PublicSubnets]]
  EksEfsTargetC3:
    Condition: CreateThreeTargets
    Type: AWS::EFS::MountTarget
    Properties: 
      FileSystemId: !Ref EksEfsFileSystem
      SecurityGroups: 
        - !Ref Ec2SecurityGroupId
      SubnetId: !Select [2, !Split [',', !Ref PublicSubnets]]
  EksEfsTargetC4:
    Condition: CreateFourTargets
    Type: AWS::EFS::MountTarget
    Properties: 
      FileSystemId: !Ref EksEfsFileSystem
      SecurityGroups: 
        - !Ref Ec2SecurityGroupId
      SubnetId: !Select [2, !Split [',', !Ref PublicSubnets]]
  EksEfsTargetD:
    Condition: CreateFourTargets
    Type: AWS::EFS::MountTarget
    Properties: 
      FileSystemId: !Ref EksEfsFileSystem
      SecurityGroups: 
        - !Ref Ec2SecurityGroupId
      SubnetId: !Select [3, !Split [',', !Ref PublicSubnets]]
