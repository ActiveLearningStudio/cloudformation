AWSTemplateFormatVersion: '2010-09-09'
Description: 'EKS Deployment via EC2 Instance'
Parameters:
  PublicSubnetId:
    Type: String
    Description: ID of Public Subnet
  SSHKeyPair:
    Description: Ec2 Keypair Name
    Type: AWS::EC2::KeyPair::KeyName
  VpcId:
    Type: String
  VpcCidrBlock:
    Type: String
    Description: CIDR Block for VPC
  ClusterName: 
    Type: String
    Description: Name of your managed EKS Cluster
  AmiId:
    Type: AWS::SSM::Parameter::Value<String>
    Description: ParameterStore name of the Parameter containing Ubuntu AMI
    Default: /aws/service/canonical/ubuntu/server/20.04/stable/current/amd64/hvm/ebs-gp2/ami-id
  AwsAccessKeyId:
    Type: String
    Description: AWS Access Key ID
    NoEcho: "true"
  AwsSecretAccessKey:
    Type: String
    Description: AWS Secret Access Key
    NoEcho: "true"
  HostedZoneId:
    Type: String
    Description: Route53 hosted zone id
  DomainName:
    Type: String
    Description: Domain name without http/https (www.example.com or *.example.com)
  # ValidationDomainName:
  #   Type: String
  #   Description: Fully Qualified domain Name (www.example.com)
  S3BucketURL:
    Type: String
    Description: S3 Bucket URL
  AcmCertArn:
    Type: String
    Description: Arn
  # DatabaseInstanceType: 
  #   AllowedValues: 
  #     - db.t2.micro
  #     - db.t2.small
  #     - db.r3.large
  #     - db.r3.xlarge
  #     - db.r3.2xlarge
  #     - db.r3.4xlarge
  #     - db.r3.8xlarge
  #   Default: db.t2.micro
  #   Description: "The instance type to use for the database."
  #   Type: String
  # DatabasePassword: 
  #   Description: "The database admin account password."
  #   MaxLength: "41"
  #   MinLength: "8"
  #   NoEcho: "true"
  #   Type: String
  # DatabaseUsername: 
  #   AllowedPattern: "[a-zA-Z0-9]+"
  #   ConstraintDescription: "must contain only alphanumeric characters."
  #   Default: awsmaster
  #   Description: "The database admin account user name."
  #   MaxLength: "16"
  #   MinLength: "1"
  #   Type: String
  # MultiAZ: 
  #   AllowedValues: 
  #     - true
  #     - false
  #   Description: "Multi AZ setup for database"
  #   Type: String
  # PGVersion: 
  #   Default: "9.6"
  #   Description: "PostgreSQL Version"
  #   Type: String
  # PrivateSubnets:
  #   Type: String
Resources:
  Ec2Instance:
    DependsOn:
      - EksEfsFileSystem
      # - AcmCertArn
    Type: AWS::EC2::Instance
    Properties: 
      ImageId: !Ref AmiId
      InstanceType: t2.micro
      KeyName: !Ref SSHKeyPair
      SecurityGroupIds: 
        - !Ref Ec2SecurityGroup
      SubnetId: !Ref PublicSubnetId
      UserData: 
        Fn::Base64: 
          !Sub |
            #!/bin/bash
            apt upgrade -y && apt update -y
            apt install awscli nfs-common unzip -y
            snap install kubectl --classic
            aws configure set aws_access_key_id ${AwsAccessKeyId} --profile default 
            aws configure set aws_secret_access_key ${AwsSecretAccessKey} --profile default
            aws eks update-kubeconfig --name ${ClusterName} --region ${AWS::Region}
            mkdir ~/efs-mount
            wget ${S3BucketURL}/storage/storage.zip
            unzip storage.zip -d ~/efs-mount
            sudo mount -t nfs4 -o nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport ${EksEfsFileSystem}.efs.${AWS::Region}.amazonaws.com:/ ~/efs-mount
            git clone -b develop https://github.com/ActiveLearningStudio/curriki-eks.git
            sed 's/substitute-me-efs-substitute-me/${EksEfsFileSystem}/g' /curriki-eks/yamls/api.yaml
            cp /curriki-eks/envs/.env.client.example /curriki-eks/envs/.env.local
            cp /curriki-eks/envs/.env.api.example /curriki-eks/envs/.env
            sudo kubectl create secret generic currikidev-api-secret --from-file=/curriki-eks/envs/.env
            sudo kubectl create secret generic currikidev-client-secret --from-file=/curriki-eks/envs/.env.local
            sudo kubectl apply -f /curriki-eks/yamls/api.yaml
            sudo kubectl apply -f /curriki-eks/yamls/client.yaml
            curl -L https://istio.io/downloadIstio | ISTIO_VERSION=1.7.3 TARGET_ARCH=x86_64 sh -
            sed 's/substitute-me-acm-cert-substitute-me/${AcmCertArn//\//\\\/}/g' /curriki-eks/yamls/istio-install.yaml
            sudo /istio-1.7.3/bin/istioctl install --set profile=default -f /curriki-eks/yamls/istio-install.yaml
            sudo kubectl label namespace default istio-injection=enabled
            sudo kubectl apply -f /curriki-eks/yamls/istio.yaml
        # sudo /istio-1.7.3/bin/istioctl install --set profile=demo
  Ec2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH Access via Port 22.
      VpcId: !Ref VpcId
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '8080'
        ToPort: '8080'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '2049'
        ToPort: '2049'
        CidrIp: 0.0.0.0/0
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-EksDeploymentSG
  
  # DatabaseSecurityGroup: 
  #   Type: "AWS::EC2::SecurityGroup"
  #   Properties: 
  #     GroupDescription: "Postgres DB Security Group"
  #     SecurityGroupIngress: 
  #       - 
  #         CidrIp: !Ref VpcCidrBlock
  #         FromPort: "5432"
  #         IpProtocol: tcp
  #         ToPort: "5432"
  #     Tags: 
  #       - 
  #         Key: Name
  #         Value: 
  #           ? "Fn::Join"
  #           : 
  #             - "-"
  #             - 
  #               - 
  #                 Ref: ClusterName
  #               - rds
  #     VpcId: !Ref VpcId
    
  # DatabaseSubnetGroup: 
  #   Type: "AWS::RDS::DBSubnetGroup"
  #   Properties: 
  #     DBSubnetGroupDescription: "DB Subnet Group"
  #     SubnetIds: 
  #       Fn::Split:
  #       - ","
  #       - !Ref PrivateSubnets
  #     Tags: 
  #       - 
  #         Key: Name
  #         Value: "rds-db-SubnetGroup"
    
  # RDSDBInstance: 
  #   Type: "AWS::RDS::DBInstance"
  #   DeletionPolicy: Snapshot
  #   Properties: 
  #     AllocatedStorage: "20"
  #     AllowMajorVersionUpgrade: "false"
  #     AutoMinorVersionUpgrade: "true"
  #     BackupRetentionPeriod: "7"
  #     CopyTagsToSnapshot: true
  #     DBInstanceClass: 
  #       Ref: DatabaseInstanceType
  #     DBInstanceIdentifier: !Sub "${ClusterName}-rds"
  #     DBName: !Sub "${ClusterName}_rds"
  #     DBSubnetGroupName:
  #       Ref: DatabaseSubnetGroup
  #     Engine: postgres
  #     EngineVersion: 
  #       Ref: PGVersion
  #     MasterUserPassword: 
  #       Ref: DatabasePassword
  #     MasterUsername: 
  #       Ref: DatabaseUsername
  #     MultiAZ: 
  #       Ref: MultiAZ
  #     PreferredBackupWindow: "05:00-05:30"
  #     PreferredMaintenanceWindow: "mon:06:00-mon:06:30"
  #     PubliclyAccessible: false
  #     StorageType: gp2
  #     VPCSecurityGroups:
  #       - Ref: DatabaseSecurityGroup

  EksEfsFileSystem:
    Type: AWS::EFS::FileSystem
    Properties: 
      BackupPolicy: 
        Status: ENABLED
      Encrypted: true
      FileSystemTags: 
        - Key: Name
          Value: EksEfsFileSystem
      LifecyclePolicies: 
        - TransitionToIA: AFTER_30_DAYS
  # AcmCertArn:
  #   Type: AWS::CertificateManager::Certificate
  #   Properties:
  #     DomainName: !Ref DomainName
  #     DomainValidationOptions:
  #       - DomainName: !Ref ValidationDomainName
  #         HostedZoneId: !Ref HostedZoneId
  #     ValidationMethod: DNS
  EksEfsTarget:
    Type: AWS::EFS::MountTarget
    Properties: 
      FileSystemId: !Ref EksEfsFileSystem
      SecurityGroups: 
        - !Ref Ec2SecurityGroup
      SubnetId: !Ref PublicSubnetId
